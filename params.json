{"name":"Pjs","tagline":"Pretty print and manipulate JSON data","body":"Pjs is an extremely simple command line tool to pretty print and search JSON data.\r\n\r\n```\r\n$ pjs ~/path/to/file.json\r\n$ curl api.twitter.com/1.1/notifications.json | pjs\r\n```\r\n\r\n### What does it do?\r\n* Reads JSON from a STDIN stream or a file.\r\n* Supports continuous streaming of multiple JSON values.\r\n* Formats and indents your JSON for readability. (Yes, indentation is configurable)\r\n* Colorizes by data type. (Yes, you can turn it off)\r\n* Sorts JSON map keys alphabetically, for readability.\r\n* Can filter JSON data by specific keys or values.\r\n\r\n### Installation\r\nPjs is written in Go, which means it's highly portable. You can get binaries here:\r\n* [darwin/amd64](https://github.com/jcasts/pjs/blob/master/bin/darwin_amd64/pjs.zip?raw=true)\r\n* [linux/amd64](https://github.com/jcasts/pjs/blob/master/bin/linux_amd64/pjs.zip?raw=true)\r\n\r\nIf you prefer compiling from source, there are no dependencies besides Go:\r\n\r\n```\r\n$ git clone https://github.com/jcasts/pjs.git && cd pjs\r\n$ go build -o pjs pjs.go\r\n```\r\n\r\n### Filtering JSON\r\nFiltering is done by passing glob-like paths to pjs after the double dash -- delimiter.\r\n\r\n```\r\n$ pjs test.json -- object/name\r\n{\r\n  \"object\": {\r\n     \"name\": \"Jim\"\r\n  }\r\n}\r\n```\r\n\r\nMultiple paths can be specified, although the examples will stick to one for simplicity.\r\n\r\n#### Key Matching\r\nKeys may be complete or partial matches. A partial match is achieved with the wildcard * character:\r\n\r\n```\r\n$ pjs test.json -- object/n*\r\n{\r\n  \"object\": {\r\n     \"name\": \"Jim\",\r\n     \"new_user\": false\r\n  }\r\n}\r\n```\r\n\r\nAn or operator may also be used to specify multiple exact keys, represented by the pipe character | :\r\n\r\n```\r\n$ pjs test.json -- \"object/name|new_user\"\r\n{\r\n  \"object\": {\r\n     \"name\": \"Jim\",\r\n     \"new_user\": false\r\n  }\r\n}\r\n```\r\n\r\n#### Arrays\r\nIf you have an array of objects, you can specify a wildcard * for the index in the path:\r\n\r\n```\r\n$ pjs test.json -- objects/*/name\r\n{\r\n  \"objects\": [\r\n    {\r\n       \"name\": \"Jim\"\r\n    },\r\n    {\r\n      \"name\": \"Amy\"\r\n    },\r\n    {\r\n      \"name\": \"Lea\"\r\n    },\r\n    {\r\n      \"name\": \"Alison\"\r\n    }\r\n}\r\n```\r\n\r\nAn index or index range may also be specified to select parts of an array:\r\n\r\n```\r\n$ pjs test.json -- objects/1..2/name\r\n{\r\n  \"objects\": [\r\n    {\r\n      \"name\": \"Amy\"\r\n    },\r\n    {\r\n      \"name\": \"Lea\"\r\n    }\r\n}\r\n```\r\n\r\n#### Values\r\nSimilarly, JSON data may be filtered by value, by using the = character:\r\n\r\n```\r\n$ pjs test.json -- objects/*/name=Amy\r\n{\r\n  \"objects\": [\r\n    {\r\n      \"name\": \"Amy\"\r\n    }\r\n}\r\n```\r\n\r\nWildcards and \"or\" selectors work the same way on values as they do on keys:\r\n\r\n```\r\n$ pjs test.json -- objects/*/name=A*\r\n{\r\n  \"objects\": [\r\n    {\r\n      \"name\": \"Amy\"\r\n    },\r\n    {\r\n      \"name\": \"Alison\"\r\n    }\r\n}\r\n```\r\n\r\n```\r\n$ pjs test.json -- \"objects/*/name=Amy|Alison\"\r\n{\r\n  \"objects\": [\r\n    {\r\n      \"name\": \"Amy\"\r\n    },\r\n    {\r\n      \"name\": \"Alison\"\r\n    }\r\n}\r\n```\r\n\r\n#### Objects by Matching Attributes\r\nOften you'll need to get the full object of a specific user. You can search for it by it's name or id, and then use the parent function, represented by double dots .., to select the parent.\r\n```\r\n$ pjs test.json -- objects/*/name=Amy/..\r\n{\r\n  \"objects\": [\r\n    {\r\n      \"age\": 43,\r\n      \"id\": 84729478,\r\n      \"last_name\": \"Smith\",\r\n      \"name\": \"Amy\"\r\n    }\r\n}\r\n```\r\n \r\n#### Recursive Searches\r\nFor some data, you may not know how deep the information you need is buried. You can specify a recursive search to get the highest level matches in your data. Use the double wildcard ** to recursively search for matches:\r\n\r\n```\r\n$ pjs test.json -- **/name=Amy/..\r\n{\r\n  \"objects\": {\r\n    \"users\": [\r\n      {\r\n        \"age\": 43,\r\n        \"id\": 84729478,\r\n        \"last_name\": \"Smith\",\r\n        \"name\": \"Amy\"\r\n      }\r\n    ]\r\n  }\r\n}\r\n```\r\n\r\nThese can be chained to search through multiple specific structures.\r\n\r\nEscape any special characters with backslash \\\\.\r\n\r\n### Licence\r\nMIT\r\n\r\n### Authors and Contributors\r\nPretty much just myself at the moment: Jeremie (@jcasts)\r\n\r\n### Support or Contact\r\nIf you discover a bug, please file it on the GitHub issues pages, here: https://github.com/jcasts/pjs/issues ","google":"UA-46308828-2","note":"Don't delete this file! It's used internally to help with page regeneration."}